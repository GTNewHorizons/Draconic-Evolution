
buildscript {
    repositories {
        mavenCentral()
        maven {
            name = "forge"
            url = "https://maven.minecraftforge.net"
        }
        maven {
            name = "Scala CI dependencies"
            url = "https://repo1.maven.org/maven2/"
        }
        maven {
            name = "sonatype"
            url = "https://oss.sonatype.org/content/repositories/snapshots/"
        }
        maven {
            name = "jitpack"
            url = "https://jitpack.io"
        }
    }

    dependencies {
        classpath 'com.github.GTNewHorizons:ForgeGradle:1.2.4'
    }
}

repositories {
    maven {
        name "chickenbones"
        url "https://chickenbones.net/maven"
    }
    maven {
        name "Overmind forge repo mirror"
        url "https://gregtech.overminddl1.com"
    }
    maven {
        name = "jitpack"
        url = "https://jitpack.io"
    }
}

apply plugin: 'forge'
apply plugin: 'signing'

// Define properties file
ext.configFile = file "build.properties"

configFile.withReader {
    // Load config.  It shall from now be referenced as simply config or project.config
    def prop = new Properties()
    prop.load(it)
    project.ext.config = new ConfigSlurper().parse prop
}

version = "${config.minecraft_version}-${config.mod_version}"
group = "com.brandon3055.draconicevolution"
archivesBaseName = "Draconic-Evolution"

minecraft {
    version = config.minecraft_version + "-" + config.forge_version
    runDir = "run"
}



dependencies {
    implementation "com.github.GTNewHorizons:CodeChickenLib:master-SNAPSHOT:dev"
    implementation "com.github.GTNewHorizons:CodeChickenCore:master-SNAPSHOT:dev"
    implementation "com.github.GTNewHorizons:NotEnoughItems:master-SNAPSHOT:dev"

    if (file('../BrandonsCore/').exists()) compile project('../BrandonsCore')
}

processResources
{
    // this will ensure that this task is redone when the versions change.
    inputs.property "version", project.version
    inputs.property "mcversion", project.minecraft.version

    // replace stuff in mcmod.info, nothing else
    from(sourceSets.main.resources.srcDirs) {
        include 'mcmod.info'
                
        // replace version and mcversion
        expand 'version':project.version, 'mcversion':project.minecraft.version
    }
        
    // copy everything else, thats not the mcmod.info
    from(sourceSets.main.resources.srcDirs) {
        exclude 'mcmod.info'
    }
}

apply plugin: 'idea'
idea {
    module {
        inheritOutputDirs = true
    }
}

task deobfJar(type: Jar) { // Generate deobfuscated
    from sourceSets.main.output
    classifier = 'deobf'
}

task sourceJar(type: Jar) { // Generate sources
    from sourceSets.main.allSource
    classifier = 'sources'
}

tasks.build.dependsOn('sourceJar', 'deobfJar')

artifacts {
   archives deobfJar
   archives sourceJar
   archives jar
}

task signJar(dependsOn: 'reobf'){
    doLast {
        ant.signjar(
            destDir: jar.destinationDir,
            jar: jar.getArchivePath(),
            alias: findProperty('keyStoreAlias') ?: '',
            keystore: findProperty('keyStore') ?: '',
            storepass: findProperty('keyStorePass') ?: '',
            digestalg: findProperty('signDigestAlg') ?: '',
            tsaurl: findProperty('signTSAurl') ?: '',
            verbose: true
            )
    }
}